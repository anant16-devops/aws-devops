name: Deploy to Amazon ECR

on:
  push:
    branches: [ "terraform-beginner" ]
env:
  AWS_REGION: eu-north-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: dummy-demo-repo           # set this to your Amazon ECR repository name

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    outputs:
      container_image: ${{ steps.build-image.outputs.image }}

    steps:
    - id: step1
      name: Checkout
      uses: actions/checkout@v4

    - id: step2
      name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - id: login-ecr
      name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - id: build-image
      name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        
        aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 837217115905.dkr.ecr.eu-north-1.amazonaws.com
        
        # Create a new Amazon ECR repository if it does not exist
        if ! aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION 2>/dev/null; then
          echo "Creating ECR repository: $ECR_REPOSITORY"
          aws ecr create-repository \
            --repository-name $ECR_REPOSITORY \
            --image-tag-mutability IMMUTABLE \
            --image-scanning-configuration scanOnPush=true \
            --region eu-north-1
        else
          echo "ECR repository $ECR_REPOSITORY already exists."
        fi
        
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: deploy
    env:
      # Set the Terraform Cloud user API token as an environment variable
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      OUTPUT1: ${{needs.deploy.outputs.container_image}}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: Beginner/AWS

    steps:    
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 1.5.7

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt

    # # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var="container_image=${{ steps.build-image.outputs.image }}"# Disabled terraform plan step to avoid unnecessary execution

    # On push to "terraform-beginner", build or change infrastructure according to Terraform configuration files
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/terraform-beginner'
    #   run: terraform apply # Disabled terraform apply step to avoid unnecessary execution
